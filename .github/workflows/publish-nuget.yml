name: Publish NuGet Package

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace}}/nuget

defaults:
  run:
    shell: pwsh

jobs:
  create_nuget:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            8.0.x
            9.0.x

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Build frontend assets
        run: |
          cd src/core
          node build.js

      - name: Copy assets to Content directory
        run: |
          $contentDir = "src/c-sharp/JakubKozera.OpenApiUi/Content"
          $distDir = "src/core/dist"

          # Create Content directory if it doesn't exist
          if (-not (Test-Path $contentDir)) {
            New-Item -ItemType Directory -Path $contentDir -Force | Out-Null
          }

          # Clear existing content
          if (Test-Path $contentDir) {
            Get-ChildItem -Path $contentDir -Recurse | Remove-Item -Force -Recurse
          }

          # Copy all files from dist to Content
          Copy-Item -Path "$distDir\*" -Destination $contentDir -Recurse -Force

          # List copied files for verification
          Write-Host "Copied files to Content directory:"
          Get-ChildItem -Path $contentDir -Recurse | ForEach-Object {
            Write-Host "  $($_.FullName.Replace($contentDir, '.'))"
          }

      - name: Create NuGet Directory
        run: mkdir ${{ env.NuGetDirectory }}

      - name: Restore dependencies
        run: dotnet restore src/c-sharp/JakubKozera.OpenApiUi/JakubKozera.OpenApiUi.csproj

      - name: Build project
        run: |
          dotnet build src/c-sharp/JakubKozera.OpenApiUi/JakubKozera.OpenApiUi.csproj --configuration Release --no-restore -p:ContinuousIntegrationBuild=true --verbosity normal

          # Check if PDB files were generated
          Write-Host "Looking for PDB files:"
          Get-ChildItem -Path "src/c-sharp/JakubKozera.OpenApiUi/bin/Release" -Recurse -Include "*.pdb" | ForEach-Object { 
            Write-Host "Found PDB: $($_.FullName)" 
          }

      - name: Create NuGet package
        run: |
          dotnet pack src/c-sharp/JakubKozera.OpenApiUi/JakubKozera.OpenApiUi.csproj \
            --configuration Release \
            --no-build \
            --output ${{ env.NuGetDirectory }} \
            -p:ContinuousIntegrationBuild=true \
            -p:IncludeSymbols=true \
            -p:SymbolPackageFormat=snupkg \
            -p:EmbedAllSources=true

      - name: List generated packages
        run: |
          Write-Host "Generated packages:"
          Get-ChildItem -Path ${{ env.NuGetDirectory }} | ForEach-Object {
            Write-Host "  $($_.Name) - $($_.Length) bytes"
          }

      - name: Inspect NuGet package contents
        run: |
          Write-Host "Contents of main NuGet package:"
          $package = Get-ChildItem "${{ env.NuGetDirectory }}/*.nupkg" | Where-Object { $_.Name -notlike "*.symbols.nupkg" } | Select-Object -First 1
          if ($package) {
            Write-Host "Inspecting: $($package.Name)"
            Add-Type -AssemblyName System.IO.Compression.FileSystem
            $zip = [System.IO.Compression.ZipFile]::OpenRead($package.FullName)
            $zip.Entries | ForEach-Object { Write-Host "  $($_.FullName)" }
            $zip.Dispose()
          } else {
            Write-Host "No main package found"
          }

      - name: Upload NuGet package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package
          path: ${{ env.NuGetDirectory }}/*.nupkg
          if-no-files-found: error

  validate_nuget:
    runs-on: ubuntu-latest
    needs: [create_nuget]

    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Download NuGet package artifact
        uses: actions/download-artifact@v4
        with:
          name: nuget-package
          path: ${{ env.NuGetDirectory }}

      - name: Install NuGet validator
        run: dotnet tool update Meziantou.Framework.NuGetPackageValidation.Tool --global

      - name: Validate NuGet package
        run: |
          $package = Get-ChildItem "${{ env.NuGetDirectory }}/*.nupkg" | Select-Object -First 1
          meziantou.validate-nuget-package $package.FullName --exclude-rule 111

  deploy:
    runs-on: ubuntu-latest
    needs: [validate_nuget]

    steps:
      - name: Download NuGet package artifact
        uses: actions/download-artifact@v4
        with:
          name: nuget-package
          path: ${{ env.NuGetDirectory }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Publish NuGet package
        run: |
          foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }
